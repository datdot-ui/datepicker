const bel = require('bel')
const csjs = require('csjs-inject')
const { isToday, format, isPast, getDay, setMonth, getDate, getMonth, getYear, getDaysInMonth } = require('date-fns')
const protocol_maker = require('protocol-maker')

var id = 0

module.exports = calendarDays

function calendarDays(opts, parent_wire) {
	const { name = 'calendar', month, days, year, status = 'cleared'} = opts

	//protocol
	const initial_contacts = { 'parent': parent_wire }
	const contacts = protocol_maker('input-number', listen, initial_contacts)

  function listen (msg) {
      const { head, refs, type, data, meta } = msg // receive msg
      const [from] = head
      console.log('Cal days', { type, from, name: contacts.by_address[from].name, msg, data })
      // handlers
      if (type === 'clear') return actionClear()
      if (type === 'selecting-second') return actionSelectingSecond(data.body)
      if (type === 'not-selecting-second') return actionKeepFirst(data.body)
      if (type === 'first-selected-by-startcal') return setStatus('first-selected-by-startcal')
      if (type === 'first-selected-by-endcal') return setStatus('first-selected-by-endcal')
      if (type === 'second-selected') return setStatus('second-selected-by-other')
      if (type === 'color-from-start') return actionColorFromStart()
      if (type === 'color-to-end') return actionColorToEnd()
      if (type === 'change') return actionRenderNewCalendars(data)
      if (type === 'color-range-from-start') return 
      if (type === 'color-range-to-end') return 

  }

	// make calendar days
	let nowMonth = month, nowDays = days, nowYear = year
	let first, second
	
	const el = document.createElement('div')
	const calendar = makeDays(nowDays)
	let buttons = [...calendar.children]
	calendar.onmousemove = onmousemove
	calendar.onclick = onclick
	calendar.onmouseleave = onmouseleave
	calendar.onmouseenter = onmouseenter

	el.append(calendar)
	const $parent = contacts.by_name['parent']

	return el

	function setStatus( nextStatus ) {
			console.log('setStatus', JSON.stringify({ type: 'status', data: { body: nextStatus } }, 0, 2))
			status = nextStatus
			$parent.notify($parent.make({ to: $parent.address, type: 'status', data: { status: nextStatus } }))
	}

	function actionRenderNewCalendars(data) {
			const { current } = data
			nowMonth = current

			let date = setMonth(new Date(), current)
			let year = getYear(date)
			let days = getDaysInMonth(date)

			nowYear = year
			nowDays = days
			const cal = makeDays(nowDays)
			buttons = [...cal.children]

			cal.onmousemove = onmousemove
			cal.onclick = onclick
			cal.onmouseleave = onmouseleave
			cal.onmouseenter = onmouseenter
			el.innerHTML = ''
			el.append(cal)
			
	}
	
	function actionSelectingSecond (body) { colorRange(0, first) }

	function actionKeepFirst (body) { onlyKeepFirst() }

	function actionColorToEnd () { colorRange(first, days + 1) }

	function actionColorFromStart () { colorRange(0, first) }

	function actionClear () { clearSelf() }

	function clearAndNotify () {
		clearSelf()
		$parent.notify($parent.make({ to: $parent.address, type: 'not-selecting-second', data: { body: '' } }))
	}
		
	function notifyOther () { $parent.notify($parent.make({ to: $parent.address, type: 'selecting-second' })) }

	function onlyKeepFirst () {
			buttons.map( btn => {
					const num = parseInt(btn.dataset.num)
					if ( num != first ) {
							btn.classList.remove(css['date-in-range'])
							btn.classList.remove([css['date-selected']])
					}
			})
	}

	function onmouseenter (event) {
			console.log('current status', status)
			if (status === 'first-selected-by-startcal') return notifyOther()
			if (status === 'first-selected-by-endcal') return notifyOther()
	}

	function onmouseleave (event) {
			console.log('current status', status)
			if (status === 'first-selected-by-startcal') return clearAndNotify()
			if (status === 'first-selected-by-endcal') return clearAndNotify()
			if (status === 'first-selected-by-self') return onlyKeepFirst()
	}

	function onmousemove (event) {
			const btn = event.target
			const current = parseInt(btn.dataset.num)
			if (!current || btn.classList.contains(css["disabled-day"])) return
			if (status === 'first-selected-by-startcal') return markRange(btn, 0, current)
			if (status === 'first-selected-by-endcal') return markRange(btn, first, current)
			if (status === 'first-selected-by-self') return markRange(btn, first, current)
	}

	function onclick (event) {
			console.log('onclick: current status', status)
			const btn = event.target
			const current = parseInt(btn.dataset.num)
			if (!current || btn.classList.contains(css["disabled-day"])) return
			if (status === 'cleared') return selectFirst(btn, current)
			if (status === 'first-selected-by-self') return selectSecond(btn, current)
			if (status === 'first-selected-by-startcal') return selectSecond(btn, current)
			if (status === 'first-selected-by-endcal') return selectSecond(btn, current)
			if (status === 'second-selected-by-self') return selectFirst(btn, current)
			if (status === 'second-selected-by-other') return selectFirst(btn, current)
	}

	function clearSelf () {
			for (var i = 0; i < buttons.length; i++) {
					buttons[i].classList.remove(css['date-in-range'])
					buttons[i].classList.remove(css['date-selected'])
			}
			first = second = void 0
	}

	function selectSecond (btn, current) {
			second = current
			setStatus('second-selected-by-self')
			$parent.notify($parent.make({ to: $parent.address, type: 'second-selected' }))
			return $parent.notify($parent.make({ to: $parent.address, type: 'value/second', data: { body: [nowYear, nowMonth+1, second] } }))
	}

	function selectFirst (btn, current) {
			clearSelf()
			$parent.notify($parent.make({ to: $parent.address, type: 'cleared' })) // notify parent to notify other cal to clear itself too
			first = current
			btn.classList.add(css['date-selected'])
			setStatus('first-selected-by-self')
			return $parent.notify($parent.make({ to: $parent.address, type: 'value/first', data: { body: [nowYear, nowMonth+1, first] } }))
	}

	function markRange (btn, A, B) {
			if (A === B) return onlyKeepFirst()
			if (A < B) colorRange(A, B)
			else colorRange(B, A)
	}

	function colorRange (first, second) {
			buttons.map( btn => {
					let current = parseInt(btn.dataset.num)
					if (!current || btn.classList.contains(css["disabled-day"])) return
					if (current < first) {
							btn.classList.remove(css['date-selected'])
							btn.classList.remove(css['date-in-range'])
					} 
					if (current === first ) { 
							btn.classList.add(css['date-selected'])
					}
					if (current > first) {
							btn.classList.add(css['date-in-range'])
					}
					if (current === second) {
							btn.classList.add(css['date-selected'])
					}
					if (current > second - 1) {
							btn.classList.remove(css['date-in-range'])
					}
					if (current > second) {
							btn.classList.remove(css['date-selected'])
							btn.classList.remove(css['date-in-range'])
					}
			})
	}

	function makeDays (days) {
			const el = bel`<section role="calendar-days" class=${css["calendar-days"]}></section>`
			// make space for week
			getSpaceInPrevMonth(el)

			for (let i = 1; i < days + 1; i++) {
					let formatDate = format(new Date(nowYear, nowMonth, i), 'd MMMM yyyy, EEEE')
					let btn = bel`<button role="button" aria-selected="false" tabindex="-1" data-num="${i}" aria-label="${formatDate}" data-date="${nowYear}-${nowMonth+1}-${i}">${i}</button>`
					if (isToday(new Date(nowYear, nowMonth, i)) ) {
							btn.classList.add(css.today)
							btn.setAttribute('aria-today', true)
					} else { 
							btn.classList.add(css.day)
							if ( isPast(new Date(nowYear, nowMonth, i)) ) btn.classList.add(css["disabled-day"])
							btn.setAttribute('aria-today', false)
					}
					el.append(btn)
			}
			
			return el
	}

	function getSpaceInPrevMonth (el) {
			// get days in previous month
			let daysInPrevMonth = getDaysInMonth(new Date(nowYear, nowMonth-1))
			// get day in prev month which means to add how many spans
			let dayInPrevMonth = getDay(new Date(nowYear, nowMonth-1, daysInPrevMonth))
			for (let s = dayInPrevMonth; s > 0; s--) {
					let span = bel`<div class=${css['day-prev']} role="presentation" aria-label aria-disabled="false"></div>`
					el.append((span))
			}
	}

}

const css = csjs`
.calendar-days {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(7, minmax(30px, auto));
    justify-items: center;
}
button {
    background: none;
    border: none;
    cursor: pointer;
}
.day {
    display: grid;
    align-items: center;
    justify-content: center;
    width: 30px;
    height: 30px;
    cursor: pointer;
    transition: color 0.25s, background-color 0.25s ease-in-out;
}
.day:hover {
    color: #fff;
    background-color: #000;
}
.today {
    background-color: #f2f2f2;
}
.date-selected, .date-selected:hover {
    color: #fff;
    background-color: #000;
}
.day-prev {}
.disabled-day, .disabled-day:hover {
    color: #BBBBBB;
    background: none;
    cursor: default;
}
.date-in-range {
    color: #000;
    background-color: #EAEAEA;
}
`