const bel = require('bel')
const csjs = require('csjs-inject')
const { format, setMonth, getMonth, getYear, getDaysInMonth } = require('date-fns')
const protocol_maker = require('protocol-maker')
const button = require('datdot-ui-button')

var id = 0
var counter = 0

module.exports = datdot_ui_calendar_month

function datdot_ui_calendar_month({ pos }, parent_wire) {
	
	// protocol
  const initial_contacts = { 'parent': parent_wire }
  const contacts = protocol_maker('input-number', listen, initial_contacts)

  function listen (msg) {
      const { head, refs, type, data, meta } = msg // receive msg
      const [from] = head
      const name = contacts.by_address[from].name
      console.log('Cal month', { type, from, name, msg, data })
      if (type === 'update') handle_update(data)
  }
	// make calendar month
	const $parent = contacts.by_name['parent']

	let date 
	if (!pos) date = new Date()
	else date = setMonth(new Date(), pos)
	if (!pos && pos !== 0) pos = getMonth(date)
	let year = getYear(date)
	let month = format(date, 'MMMM')


	const title = bel`<h3 class=${css.title}>${month} ${year}</h3>`
	let path = 'https://raw.githubusercontent.com/datdot-ui/icon/main/src/svg/'
	const prev = button({ name: 'prev', icons: [{ name: 'arrow-left', path }] }, contacts.add('prev'))
	prev.onclick = () => handle_onclick(prev)
	const next = button({ name: 'next', icons: [{ name: 'arrow-right', path}] }, contacts.add('next'))
	next.onclick = () => handle_onclick(next)

	var el = bel`<div class=${css["calendar-header"]}>${prev}${title}${next}</div>`

	return el

	function handle_onclick (target) {
		const name = target.getAttribute('aria-label')
		$parent.notify($parent.make({ to: $parent.address, type: 'click', data: { name }}))
	} 

	function handle_update (data) {
		if (data.current || data.current === 0) {
			update_month(data.current)
		}
	}

	function update_month (current) {
		let date = setMonth(new Date(), current)
		let year = getYear(date)
		let month = format(date, 'MMMM')

		title.innerHTML = `${month} ${year}`
	}

}

const css = csjs`
.calendar-header {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: minmax(25px, 30px) auto minmax(25px, 30px);
    align-items: center;
}
.datepicker-header {
    display: grid;
    grid-template-rows: 30px;
    grid-template-columns: auto;
    align-items: center;
    margin-bottom: 12px;
}
.datepicker-header > h3 {
    margin: 0;
}
.btn {
    background: none;
    border: none;
    border-radius: 50px;
    width: 30px;
    height: 30px;
    padding: 0;
    transition: background-color 0.3s ease-in-out;
    cursor: pointer;
}
.btn:active, .btn:hover {
    background-color: #C9C9C9;
}
.btn:active div > svg path, .btn:hover div > svg path {
    
}
.icon svg path {
    transition: stroke 0.25s ease-in-out;
}
.title {
    text-align: center;
}
`